#!/bin/bash -e
# Simple script that creates a Makefile for all c files that contain a main function
CC="gcc"
CFLAGS="-Wall -Wextra -pedantic -std=c99 $*"
INCS="-I../include"
LIBPATH=../lib/libxtcommon.a
cat <<END >.gitignore
# Created by build script. Modifications are lost when rerun.
.gitignore
Makefile
*.tmp
# VIM
*.swp
*.vim
# CC
*.o
END
SYSTEM=`uname -s 2>/dev/null`
case "$SYSTEM" in
	Linux*)
		LDLIBS=" -lpthread"
		MACHINE_ARCH=`uname -m`
		if [ "$MACHINE_ARCH" != "x86_64" ]; then
			# Enable large file support if we're not on 64 bit
			CFLAGS="$CFLAGS -D_FILE_OFFSET_BITS=64"
		fi
		;;
	CYGWIN*)
		LDLIBS=" -lntdll -lws2_32"
		;;
	*)
		echo 'Unsupported system' 1>&2
		exit 1
		;;
esac
CFLAGS="$CFLAGS $INCS"
# Write phony target and overwrite some builtin variables
cat <<END >Makefile
.PHONY: default clean

CC=$CC
CFLAGS=$CFLAGS
LDLIBS=$LDLIBS

END

printf "MAIN=" >>Makefile
# Filter Binary.* and strip extensions
MAIN=$(grep -r 'int main' | sed -e '/Binary.*/d' -e 's/:.*//g')
# Write elf executables
for i in $MAIN; do
	bin="${i/%.c/}"
	echo "$bin" >>.gitignore
	printf ' \\\n\t%s' "$bin" >>Makefile
done
# Write object files
printf '\nOBJECTS=' >>Makefile
FILES=$(find . -name '*.c')
FILES="${FILES//.\//}"
for i in $FILES; do
	printf ' \\\n\t%s' "${i/%.c/.o}" >>Makefile
done
for i in $MAIN; do
	FILES="${FILES/$i/}"
done
printf '\nLIST=' >>Makefile
for i in $FILES; do
	printf ' \\\n\t%s' "${i/%.c/.o}" >>Makefile
done
cat <<'EOF' >>Makefile

default: $(OBJECTS) $(MAIN)
EOF
for i in $MAIN; do
	printf '%s: %s %s $(LIST)\n' "${i/%.c/}" "$LIBPATH" "${i/%.c/.o}" >>Makefile
done
cat <<'EOF' >>Makefile
%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS)
clean:
	rm -f $(MAIN) $(OBJECTS)
EOF
